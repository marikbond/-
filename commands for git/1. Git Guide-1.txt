
=============== Первоначальная настройка git =========================
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com


=============== INIT ================================================
git init  создает новый репозиторий. Создает папку .git



============== Настройка вывода русских букв =======================
Все команды можно указывать с двумя видами ключей 
	--local 	устанавливает настройку локально
	--global 	устанавливает настройку глобально
	
git config --local core.quotepath false	
Решает проблему с отображением названий файлов на русском.

git config --local core.pager "iconv.exe -f cp1251 -t utf-8 | less"
Решает проблему с выводом русских букв внутри файлов.

git config --local i18n.commitEncoding utf8
git config --local i18n.logoutputencoding cp1251
Решает проблему с commitMessage на русском


============== ADD ===============================================
git add -A / git add <fileName> 
	ѕереносит файлы из неотслеживаемой области в отслеживаемую.
	git add -A			переносит все файлы
	git add <fileName>	переносит конкретный файл

	
============== СТАТУС РЕПОЗИТОРИЯ ===============================
git status - просмотреть текущий статус репозитория.

	
============== RESET (простой вариант) ===========================
git reset -- / git reset -- <fileName> 
	переносит файлы обратно из отслеживаемой области в неотслеживаемую.
	git reset 			    переносит все файлы
	git reset -- <fileName>	переносит конкретный файл

	
============== LOG Просмотр истории коммитов ======================================	
git log — разнообразная информация о коммитах в целом, по отдельным 
	файлам и различной глубины погружения в историю.
	
	git log / git log <fileName>				короткая справка по всем коммитам
	git log --stat / git log --stat	<fileName> 	статистика изменения файлов
	git log --pretty=oneline — выведет на каждый из коммитов по строчке, состоящей из хэша и commitMessage
	git log --pretty=short - сокращенная версия вывода
	git log --pretty=full / fuller — более полная информация о коммитах,
	
	
============== DIFF (просмотр внесенных изменений) ===================================
git diff 						покажет не внесенные в отслуживаемую область изменения.
git diff --cached				изменения, внесенные в отслуживаемую область.
git diff HEAD 					изменения в проекте по сравнению с последним коммитом
git diff master..experimental 	сравнивает головы веток
git diff experimental			сравинть активную ветку с какой-либо
git show HEAD@{<номер>}			посмотреть изменения, внесенные любым коммитом


============== COMMIT =============================================
git commit -m '<commitMessage> очень желательно на английском'
git commit --amend	добавляем изменения в последний коммит
Например:
	$ git commit -m 'initial commit'
	$ git add forgotten_file
	$ git commit --amend
	
git commit -a -m '<commitMessage>' аналогичен запуску двух команд: git add и git commit.
	
============== CHECKOUT =======================
git checkout some-other-branch			переключение между ветками
git checkout -b some-other-new-branch	создаст ветку, в которую и произойдет переключение.

Если в текущей ветке были какие-то изменения по сравнению с последним коммитом в
ветке(HEAD), то команда откажется производить переключение, дабы не потерять
произведенную работу. Проигнорировать этот факт позволяет ключ -f:

git checkout -f some-other-branch

В случае, когда изменения надо все же сохранить, используют ключ -m. Тогда команда
перед переключением попробует залить изменения в текущую ветку и, после
разрешения возможных конфликтов, переключиться в новую:

checkout -m some-other-branch


============== MERGE СЛИЯНИЕ ВЕТОК ===================
git merge <branchName> — попробует объединить текующую ветку и ветку branchName.

В случае возникновения конфликтов коммита не происходит, а по проблемным файлам
расставляются специальные метки. 
До тех пор пока проблемы не будут решены, коммит сделать нельзя.

Например, конфликт возник в файле TROUBLE:

git merge experiment — произошла неудачная попытка слияния.
git status — смотрим на проблемные места.
edit TROUBLE — разрешаем проблемы.
git add. — индексируем наши изменения, тем самым снимая метки.
git commit — совершаем коммит слияния.

Если в процессе разрешения вы передумали разрешатьконфликт, достаточно набрать:
git reset --hard HEAD — это вернет обе ветки в исходные состояния.
Если же коммит слияния был совершен, используем команду:
git reset --hard ORIG_HEAD


